
name: singularis
services:
  grobid:
    image: lfoppiano/grobid:latest-crf
    container_name: grobid
    environment:
      GROBID__NB_THREADS: "2"
      GROBID__MAX_CONNECTIONS: "8"
    ports:
      - "8070:8070"   # REST API
      - "8071:8071"   # Admin
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8070/api/isalive"]
      interval: 15s
      timeout: 5s
      retries: 20
    networks: [singularis-net]

  neo4j:
    image: neo4j:5
    container_name: neo4j
    environment:
      NEO4J_AUTH: ${NEO4J_AUTH:-neo4j/testtest}
      NEO4J_apoc_export_file_enabled: "true"
      NEO4J_apoc_import_file_enabled: "true"
      NEO4J_apoc_import_file_use__neo4j__config: "true"
      NEO4J_dbms_security_procedures_unrestricted: "apoc.*"
    ports:
      - "7474:7474"   # HTTP UI
      - "7687:7687"   # Bolt
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
      - ./export:/import
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:7474"]
      interval: 15s
      timeout: 5s
      retries: 20
    networks: [singularis-net]

  redis:
    image: redis:7
    container_name: redis
    ports: ["6379:6379"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 30
    networks: [singularis-net]

  api:
    build:
      context: ./ui/server        # FastAPI сервер
      dockerfile: Dockerfile
    container_name: singularis-api
    env_file: .env
    environment:
      GROBID_URL: http://grobid:8070
      REDIS_URL: redis://redis:6379/0
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: ${NEO4J_USER:-neo4j}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-testtest}
      S1_RULES_PATH: /app/rules/common.yaml
    volumes:
      - ./pipeline:/app/pipeline:ro
      - ./rules:/app/rules:ro
      - ./export:/app/export
      - ./data:/app/data
      - ./dataset:/app/dataset:ro
      - ./tools:/app/tools:ro
      - ./ui:/app/ui:ro
      - ./workdir:/app/workdir
    ports:
      - "8000:8000"         # FastAPI
    depends_on:
      grobid:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    networks: [singularis-net]

  worker:
    build:
      context: ./pipeline        # S1/S2 пайплайн
      dockerfile: Dockerfile
    container_name: singularis-worker
    env_file: .env
    environment:
      REDIS_URL: redis://redis:6379/0
      GROBID_URL: http://grobid:8070
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: ${NEO4J_USER:-neo4j}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-testtest}
      S1_RULES_PATH: /app/rules/common.yaml
    volumes:
      - ./pipeline:/app:rw
      - ./rules:/app/rules:ro
      - ./data:/app/data
      - ./export:/app/export
      - ./dataset:/app/dataset:ro
      - ./tools:/app/tools:ro
      - ./workdir:/app/workdir
    depends_on:
      redis:
        condition: service_healthy
    # пример: rq worker или celery - адаптируй под свой раннер
    command: python -m pipeline.worker
    networks: [singularis-net]

  web:
    build:
      context: ./ui/web          # React + Cytoscape
      dockerfile: Dockerfile
    container_name: singularis-web
    environment:
      VITE_API_URL: http://localhost:8000
    ports:
      - "3000:3000"              # React dev / Vite
    depends_on:
      - api
    networks: [singularis-net]

networks:
  singularis-net:
    driver: bridge

volumes:
  neo4j-data:
  neo4j-logs:
